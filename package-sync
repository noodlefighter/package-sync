#!/bin/env python3

import os
import json
import click
from functools import reduce

@click.command()
@click.argument('file')
@click.argument('method')
@click.argument('args', nargs=-1)
def mysync(file, method, args):
    args = list(args) # truple to

    # get data
    with open(file, 'r+') as f:
        data = json.loads(f.read())
    if data['sync'] is None:
        data['sync'] = list()
    if data['ignore'] is None:
        data['ignore'] = list()

    # get pending list
    os.system("pacman -Qeqn > pkglist.tmp.txt")
    with open("pkglist.tmp.txt") as f:
        l = f.readlines()
        l = map(lambda x: x.strip(), l)
        l = filter(lambda x: x not in data['ignore'] and x not in data['sync'], l)
        pending_list = l
    os.system("rm pkglist.tmp.txt")

    if method == 'list-pending':
        print('\n'.join(pending_list))
    elif method == 'list-sync':
        print('\n'.join(data['sync']))
    elif method == 'list-ignore':
        print('\n'.join(data['ignore']))
    elif method == 'add':
        add_list = list(filter(lambda x: x not in data['sync'], args))
        data['sync'].extend(add_list)
        if len(add_list) == 0:
            print('added nothing')
        else:
            print(f"added: {' '.join(add_list)}")
    elif method == 'ignore':
        ignore_list = list(filter(lambda x: x not in data['ignore'], args))
        data['ignore'].extend(ignore_list)
        if len(ignore_list) == 0:
            print('ignore nothing')
        else:
            print(f"ignore: {' '.join(add_list)}")
    elif method == 'del':
        data['ignore'] = list(filter(lambda x: x not in args, data['ignore']))
        data['sync'] = list(filter(lambda x: x not in args, data['sync']))
    # save data
    with open(file, 'w+') as f:
        f.write(json.dumps(data, sort_keys=True, indent=4))

if __name__ == '__main__':
    mysync()
